{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\client_server_test\\\\client\\\\src\\\\components\\\\Audio\\\\Record.jsx\";\nimport React, { useState } from 'react';\nimport { ReactMic } from \"react-mic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [isRecording, setIsRecording] = useState(false);\nconst [audioData, setAudioData] = useState(null);\nconst startRecording = () => {\n  setIsRecording(true);\n};\nconst stopRecording = () => {\n  setIsRecording(false);\n};\nconst onData = recordedData => {\n  setAudioData(recordedData);\n};\nconst onStop = recordedData => {\n  setAudioData(recordedData);\n  // Envoyer le fichier audio au serveur pour la transcription ici\n  uploadAudioFile(recordedData);\n};\nconst uploadAudioFile = async audioData => {\n  const formData = new FormData();\n  formData.append(\"audio\", audioData.blob, \"recording.wav\");\n  const response = await axios.post(\"/api/transcribe\", formData);\n  return response.data;\n};\nconst Record = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      children: \"D\\xE9marrer l'enregistrement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      children: \"Arr\\xEAter l'enregistrement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactMic, {\n      record: isRecording,\n      onData: onData,\n      onStop: onStop,\n      mimeType: \"audio/wav\",\n      strokeColor: \"#000000\",\n      backgroundColor: \"#FF4081\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_c = Record;\nexport default Record;\nvar _c;\n$RefreshReg$(_c, \"Record\");","map":{"version":3,"names":["React","useState","ReactMic","isRecording","setIsRecording","audioData","setAudioData","startRecording","stopRecording","onData","recordedData","onStop","uploadAudioFile","formData","FormData","append","blob","response","axios","post","data","Record"],"sources":["C:/Users/Lenovo/Desktop/client_server_test/client/src/components/Audio/Record.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ReactMic } from \"react-mic\";\r\n\r\nconst [isRecording, setIsRecording] = useState(false);\r\nconst [audioData, setAudioData] = useState(null);\r\n\r\nconst startRecording = () => {\r\n  setIsRecording(true);\r\n};\r\n\r\nconst stopRecording = () => {\r\n  setIsRecording(false);\r\n};\r\n\r\nconst onData = (recordedData) => {\r\n  setAudioData(recordedData);\r\n};\r\n\r\nconst onStop = (recordedData) => {\r\n  setAudioData(recordedData);\r\n  // Envoyer le fichier audio au serveur pour la transcription ici\r\n  uploadAudioFile(recordedData) ; \r\n};\r\n\r\nconst uploadAudioFile = async (audioData) => {\r\n    const formData = new FormData();\r\n    formData.append(\"audio\", audioData.blob, \"recording.wav\");\r\n    const response = await axios.post(\"/api/transcribe\", formData);\r\n    return response.data;\r\n  };\r\n\r\nconst Record = () => {\r\n  return (\r\n    <div>\r\n      <button onClick={startRecording}>Démarrer l'enregistrement</button>\r\n      <button onClick={stopRecording}>Arrêter l'enregistrement</button>\r\n      <ReactMic\r\n        record={isRecording}\r\n        onData={onData}\r\n        onStop={onStop}\r\n        mimeType=\"audio/wav\"\r\n        strokeColor=\"#000000\"\r\n        backgroundColor=\"#FF4081\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Record"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,QAAQ,WAAW;AAAC;AAErC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGH,QAAQ,CAAC,KAAK,CAAC;AACrD,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;AAEhD,MAAMM,cAAc,GAAG,MAAM;EAC3BH,cAAc,CAAC,IAAI,CAAC;AACtB,CAAC;AAED,MAAMI,aAAa,GAAG,MAAM;EAC1BJ,cAAc,CAAC,KAAK,CAAC;AACvB,CAAC;AAED,MAAMK,MAAM,GAAIC,YAAY,IAAK;EAC/BJ,YAAY,CAACI,YAAY,CAAC;AAC5B,CAAC;AAED,MAAMC,MAAM,GAAID,YAAY,IAAK;EAC/BJ,YAAY,CAACI,YAAY,CAAC;EAC1B;EACAE,eAAe,CAACF,YAAY,CAAC;AAC/B,CAAC;AAED,MAAME,eAAe,GAAG,MAAOP,SAAS,IAAK;EACzC,MAAMQ,QAAQ,GAAG,IAAIC,QAAQ,EAAE;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEV,SAAS,CAACW,IAAI,EAAE,eAAe,CAAC;EACzD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,iBAAiB,EAAEN,QAAQ,CAAC;EAC9D,OAAOI,QAAQ,CAACG,IAAI;AACtB,CAAC;AAEH,MAAMC,MAAM,GAAG,MAAM;EACnB,oBACE;IAAA,wBACE;MAAQ,OAAO,EAAEd,cAAe;MAAA,UAAC;IAAyB;MAAA;MAAA;MAAA;IAAA,QAAS,eACnE;MAAQ,OAAO,EAAEC,aAAc;MAAA,UAAC;IAAwB;MAAA;MAAA;MAAA;IAAA,QAAS,eACjE,QAAC,QAAQ;MACP,MAAM,EAAEL,WAAY;MACpB,MAAM,EAAEM,MAAO;MACf,MAAM,EAAEE,MAAO;MACf,QAAQ,EAAC,WAAW;MACpB,WAAW,EAAC,SAAS;MACrB,eAAe,EAAC;IAAS;MAAA;MAAA;MAAA;IAAA,QACzB;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAA,KAfKU,MAAM;AAiBZ,eAAeA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}